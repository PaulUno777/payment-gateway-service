// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  uid          String   @default(uuid())
  email        String   @unique
  username     String?
  password     String
  firstName    String?  @map("firstname")
  lastName     String?  @map("lastname")
  phone        String?
  isActive     Boolean  @default(true) @map("active")
  isDeleted    Boolean  @default(false) @map("account_deleted")
  role         RoleType
  refreshToken String?

  @@map("administrators")
}

enum RoleType {
  super_admin
  client_manager
  manage_users
  all
  new_role
  api_client
}

model Role {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")

  name      String  @unique
  isDeleted Boolean @default(false) @map("deleted")

  @@map("roles")
}

model ApiClient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  apiKey      String? @unique @default(uuid())
  secretKey   String? @unique @default(uuid())
  isActive    Boolean @default(true)
  description String?
  webhookUrl  String?

  @@map("api-clients")
}

model PaymentProvider {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  label        String?
  code         ProviderCode   @unique
  type         ProviderType
  applyCountry String?
  logo         String?
  isActive     Boolean        @default(true)
  params       ProviderParams
  Transaction  Transaction[]

  @@map("payment_providers")
}

type ProviderParams {
  isDepositAvailable      Boolean @default(false)
  isWithdrawalAvailable   Boolean @default(false)
  isCustomerInfoAvailable Boolean @default(false)
  minimumThreshold        Float
  maximumThreshold        Float
}

enum ProviderType {
  MOBILE_MONEY
  BANKING
  CASH
}

enum OperatorCode {
  ORANGE_MONEY
  MTN_MOBILE_MONEY
}

enum ProviderCode {
  MOBILE_MONEY_API
  INTOUCH
  AUTO_USSD
}

model Transaction {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  CompletedAt DateTime? @updatedAt

  source           Source
  senderDetails    SenderDetails
  recipientDetails RecipientDetails
  amount           Amount
  operatorCode     OperatorCode
  fees             Float            @default(0)
  description      String?
  callbackUrl      String?
  payToken         String?
  state            State            @default(PENDING)
  mouvement        Mouvement
  report           ExecutionReport?

  provider     PaymentProvider? @relation(fields: [providerCode], references: [code])
  providerCode ProviderCode

  @@map("transactions")
}

type ExecutionReport {
  startLog   Json?
  startTrace String?
  endLog     Json?
  endTrace   String?
}

type Source {
  name     String
  entityId String
  type     SourceType
}

type SenderDetails {
  id      String
  name    String?
  country String?
}

type RecipientDetails {
  id      String
  name    String?
  country String  @default("CM")
}

type Amount {
  originalCurrency    String
  originalAmount      Float
  destinationCurrency String
  destinationAmount   Float
  exchangeRate        Float
}

enum SourceType {
  ADMIN
  SERVICE
}

enum State {
  PENDING
  SUCCESS
  FAILED
  CANCEL
}

enum Mouvement {
  DEPOSIT
  WITHDRAWAL
}

// model Wallet {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   creditWalletId String

//   apiClient String @default("INTERNAL")

//   paymentProvider PaymentProvider @relation(fields: [owner], references: [id])
//   owner           String          @db.ObjectId
//   transaction     Transaction?

//   @@map("wallets")
// }
