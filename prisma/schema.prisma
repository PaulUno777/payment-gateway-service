// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  uid          String   @default(uuid())
  email        String   @unique
  username     String?  @unique
  password     String
  firstName    String?  @map("firstname")
  lastName     String?  @map("lastname")
  phone        String?
  isActive     Boolean  @default(true) @map("active")
  isDeleted    Boolean  @default(false) @map("account_deleted")
  role         RoleType
  refreshToken String?

  @@map("administrators")
}

enum RoleType {
  super_admin
  client_manager
  manage_users
  all
  new_role
}

model Role {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")

  name      String  @unique
  isDeleted Boolean @default(false) @map("deleted")

  @@map("roles")
}

model ApiClient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String  @unique
  apiKey      String  @unique @map("api_key")
  secretKey   String  @unique @map("secret_key")
  isActive    Boolean @default(true) @map("active")
  description String?
  webhookUrl  String? @default("webhook_url") @map("webhook_url")

  @@map("api-clients")
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type    String
  content String

  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?      @db.ObjectId

  @@map("logs")
}

model PaymentProvider {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code                  ProviderCode @unique
  type                  ProviderType @default(MOBILE_MONEY)
  applyCountry          String?
  logo                  String?
  isDepositAvailable    Boolean      @default(false)
  isWithdrawalAvailable Boolean      @default(false)
  label                 String?
  isActive              Boolean      @default(true)

  Wallet Wallet[]

  @@map("payment_providers")
}

enum ProviderType {
  MOBILE_MONEY
  BANKING
  CASH
}

enum ProviderCode {
  ORANGE_MONEY
  MTN_MOBILE_MONEY
}

model Transaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount          Float
  verifyAt        DateTime?
  startLog        String    @default("")
  startSignature  String    @default("")
  endLog          String?
  endSignature    String?
  verificationKey String?
  hash            String?
  description     String?
  callbackUrl     String?
  externalId      String?
  targetNumber    String?
  payToken        String?

  state     State     @default(PENDING)
  apiClient String?
  mouvement Mouvement
  Log       Log[]

  wallet   Wallet? @relation(fields: [walletId], references: [id])
  walletId String? @unique @db.ObjectId

  @@map("transactions")
}

enum State {
  PENDING
  SUCCESS
  FAILED
  CANCEL
}

enum Mouvement {
  DEPOSIT
  WITHDRAWAL
}

model Wallet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creditWalletId String

  apiClient String @default("INTERNAL")

  paymentProvider PaymentProvider @relation(fields: [owner], references: [id])
  owner           String          @db.ObjectId
  transaction     Transaction?

  @@map("wallets")
}
