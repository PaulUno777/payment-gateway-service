// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model RefreshTokenStore {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  refreshToken String?

  @@map("refresh_token_store")
}

model ApiClient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  apiKey      String? @unique
  secretKey   String? @unique
  isActive    Boolean @default(true)
  description String?
  webhookUrl  String?

  @@map("api_clients")
}

model PaymentProvider {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  label        String?
  code         ProviderCode   @unique
  type         ProviderType
  applyCountry String[]
  logo         String?
  isActive     Boolean        @default(true)
  params       ProviderParams

  @@map("payment_providers")
}

type ProviderParams {
  isDepositAvailable      Boolean @default(false)
  isWithdrawalAvailable   Boolean @default(false)
  isCustomerInfoAvailable Boolean @default(false)
  isBalanceInfoAvailable  Boolean @default(false)
  minimumThreshold        Float
  maximumThreshold        Float
}

enum ProviderType {
  MOBILE_MONEY
  BANKING
  CARD_NUMBER
}

enum ProviderCode {
  CM_MTN_MOBILE_MONEY
  CM_ORANGE_MONEY
  CM_INTOUCH
  CM_AUTO_USSD
}

model Transaction {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  CompletedAt DateTime? @updatedAt

  source           Source
  senderDetails    SenderDetails
  recipientDetails RecipientDetails
  amount           Amount
  fees             Float?            @default(0)
  description      String?
  callbackUrl      String?
  payToken         String?
  operatorCode     ProviderCode
  state            State             @default(CREATED)
  mouvement        Mouvement
  executionReports ExecutionReport[] @relation(fields: [], references: [])

  providerCode ProviderCode?

  @@map("transactions")
}

model ExecutionReport {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  CompletedAt DateTime? @updatedAt

  providerCode ProviderCode?
  startLog     Json
  startTrace   String
  endLog       Json?
  endTrace     String?

  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?      @db.ObjectId

  @@map("execution_reports")
}

type Source {
  name     String
  entityId String
  type     SourceType
}

type SenderDetails {
  id      String
  name    String?
  country String?
}

type PayeeId {
  partyIdType ProviderType @default(MOBILE_MONEY)
  partyId     String
}

type RecipientDetails {
  payeeId PayeeId
  name    String?
  country String  @default("CM")
}

type Amount {
  originalCurrency    String
  originalAmount      Float
  destinationCurrency String
  destinationAmount   Float
  exchangeRate        Float
}

enum SourceType {
  ADMIN
  SERVICE
}

enum State {
  CREATED
  PENDING
  SUCCESS
  FAILED
  CANCEL
}

enum Mouvement {
  DEPOSIT
  WITHDRAWAL
}

// model Wallet {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   creditWalletId String

//   apiClient String @default("INTERNAL")

//   paymentProvider PaymentProvider @relation(fields: [owner], references: [id])
//   owner           String          @db.ObjectId
//   transaction     Transaction?

//   @@map("wallets")
// }

enum RoleType {
  super_admin
  client_manager
  manage_users
  all
  new_role
  api_client
}
